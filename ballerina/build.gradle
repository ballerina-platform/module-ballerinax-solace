/*
 * Copyright (c) 2025, WSO2 LLC. (http://www.wso2.com)
 *
 * WSO2 LLC. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

import org.apache.tools.ant.taskdefs.condition.Os

plugins {
    id 'io.ballerina.plugin'
}

description = 'Ballerina - Solace Connector'

def packageName = "solace"
def packageOrg = "ballerinax"
def tomlVersion = stripBallerinaExtensionVersion("${project.version}")
def ballerinaTomlFilePlaceHolder = new File("${project.rootDir}/build-config/resources/Ballerina.toml")
def ballerinaTomlFile = new File("$project.projectDir/Ballerina.toml")

def stripBallerinaExtensionVersion(String extVersion) {
    if (extVersion.matches(project.ext.timestampedVersionRegex)) {
        def splitVersion = extVersion.split('-')
        if (splitVersion.length > 3) {
            def strippedValues = splitVersion[0..-4]
            return strippedValues.join('-')
        } else {
            return extVersion
        }
    } else {
        return extVersion.replace("${project.ext.snapshotVersion}", "")
    }
}

ballerina {
    packageOrganization = packageOrg
    module = packageName
    testCoverageParam = "--code-coverage --coverage-format=xml"
    isConnector = true
    platform = "java21"
}

configurations {
    externalJars
}

dependencies {
    /* JMS dependencies */
    externalJars(group: 'javax.jms', name: 'javax.jms-api', version: "${jmsApiVersion}") {
        transitive = false
    }

    /* Solace dependencies */
    externalJars(group: 'com.solacesystems', name: 'sol-jms', version: "${solaceJmsVersion}") {
        exclude group: 'org.apache.geronimo.specs', module: 'geronimo-jms_2.0_spec'
        transitive = false
    }
    externalJars(group: 'com.solace', name: 'solace-serdes', version: "${solaceSerdesVersion}") {
        transitive = false
    }

    /* Netty dependencies - required by sol-jms */
    externalJars(group: 'io.netty', name: 'netty-common', version: "${nettyVersion}") {
        transitive = false
    }
    externalJars(group: 'io.netty', name: 'netty-buffer', version: "${nettyVersion}") {
        transitive = false
    }
    externalJars(group: 'io.netty', name: 'netty-transport', version: "${nettyVersion}") {
        transitive = false
    }
    externalJars(group: 'io.netty', name: 'netty-resolver', version: "${nettyVersion}") {
        transitive = false
    }
    externalJars(group: 'io.netty', name: 'netty-handler', version: "${nettyVersion}") {
        transitive = false
    }
    externalJars(group: 'io.netty', name: 'netty-codec', version: "${nettyVersion}") {
        transitive = false
    }
    externalJars(group: 'io.netty', name: 'netty-codec-http', version: "${nettyVersion}") {
        transitive = false
    }
    externalJars(group: 'io.netty', name: 'netty-handler-proxy', version: "${nettyVersion}") {
        transitive = false
    }
    externalJars(group: 'io.netty', name: 'netty-transport-native-epoll', version: "${nettyVersion}") {
        transitive = false
    }
    externalJars(group: 'io.netty', name: 'netty-transport-classes-epoll', version: "${nettyVersion}") {
        transitive = false
    }
    externalJars "io.netty:netty-transport-native-epoll::linux-x86_64"
    externalJars "io.netty:netty-transport-native-epoll::linux-aarch_64"
    externalJars(group: 'io.netty', name: 'netty-transport-native-kqueue', version: "${nettyVersion}") {
        transitive = false
    }
    externalJars(group: 'io.netty', name: 'netty-transport-classes-kqueue', version: "${nettyVersion}") {
        transitive = false
    }
    externalJars "io.netty:netty-transport-native-kqueue::osx-x86_64"
    externalJars "io.netty:netty-transport-native-kqueue::osx-aarch_64"

    /* Other dependencies */
    externalJars(group: 'commons-logging', name: 'commons-logging', version: "${commonsLoggingVersion}") {
        transitive = false
    }
    externalJars(group: 'org.apache.servicemix.bundles', name: 'org.apache.servicemix.bundles.jzlib', version: "${servicemixJzlibVersion}") {
        transitive = false
    }
    externalJars(group: 'org.osgi', name: 'org.osgi.annotation', version: "${osgiAnnotationVersion}") {
        transitive = false
    }
}

task updateTomlFiles {
    doLast {
        def newBallerinaToml = ballerinaTomlFilePlaceHolder.text.replace("@project.version@", project.version)
        newBallerinaToml = newBallerinaToml.replace("@toml.version@", tomlVersion)
        newBallerinaToml = newBallerinaToml.replace('@javax.jms.version@', project.jmsApiVersion)
        newBallerinaToml = newBallerinaToml.replace("@sol.jms.version@", project.solaceJmsVersion)
        newBallerinaToml = newBallerinaToml.replace('@commons.logging.version@', project.commonsLoggingVersion)
        newBallerinaToml = newBallerinaToml.replace('@servicemix.jzlib.version@', project.servicemixJzlibVersion)
        newBallerinaToml = newBallerinaToml.replace('@osgi.annotation.version@', project.osgiAnnotationVersion)
        newBallerinaToml = newBallerinaToml.replace('@netty.version@', project.nettyVersion)
        newBallerinaToml = newBallerinaToml.replace('@netty.tcnative.boringssl.static.version@', project.nettyTcnativeBoringsslStaticVersion)
        newBallerinaToml = newBallerinaToml.replace('@solace.serdes.version@', project.solaceSerdesVersion)
        ballerinaTomlFile.text = newBallerinaToml
    }
}

task commitTomlFiles {
    doLast {
        project.exec {
            ignoreExitValue true
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                commandLine 'cmd', '/c', "git commit -m \"[Automated] Update the toml files\" Ballerina.toml Dependencies.toml"
            } else {
                commandLine 'sh', '-c', "git commit -m '[Automated] Update the toml files' Ballerina.toml Dependencies.toml"
            }
        }
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            artifact source: createArtifactZip, extension: 'zip'
        }
    }
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/ballerina-platform/module-${packageOrg}-${packageName}")
            credentials {
                username = System.getenv("publishUser")
                password = System.getenv("publishPAT")
            }
        }
    }
}

task startSolaceServer() {
    doLast {
        if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
            def dockerComposeFile = "${project.projectDir}/tests/resources/docker-compose.yaml"
            def initScript = "${project.projectDir}/tests/resources/init-solace.sh"
            exec {
                commandLine 'sh', '-c', "docker compose -f $dockerComposeFile up -d"
            }
            sleep(20 * 1000)
            // Initialize queues
            exec {
                commandLine 'sh', '-c', "chmod +x $initScript && $initScript"
                ignoreExitValue false
            }
        }
    }
}

task stopSolaceServer() {
    doLast {
        if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
            def dockerComposeFile = "${project.projectDir}/tests/resources/docker-compose.yaml"
            exec {
                commandLine 'sh', '-c', "docker compose -f $dockerComposeFile rm -svf"
            }
            sleep(5 * 1000)
        }
    }
}

clean {
    delete 'build'
}

build.dependsOn copyToLib
build.dependsOn ":${packageName}-native:build"
build.dependsOn generatePomFileForMavenPublication

test.dependsOn ":${packageName}-native:build"
test.dependsOn startSolaceServer
test.finalizedBy stopSolaceServer

publish.dependsOn build
publishToMavenLocal.dependsOn build
